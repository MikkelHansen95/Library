SET search_path TO libraryschema

/* CREATE TYPE booktype as ENUM('Paperback','Ebook');*/

Drop table book CASCADE;
Drop table client CASCADE;
Drop table loans CASCADE;
Drop table clienttype CASCADE;
Drop table bookinstance CASCADE;

create table book(
    isbn bigint UNIQUE PRIMARY KEY check (isbn > 999999999999 and isbn < 10000000000000),
    title varchar(99),
	author varchar(99),
	publisher varchar(99),
	publishYear date,
	type booktype NOT NULL
);
create table clienttype (
	id serial PRIMARY KEY,
	name varchar(30),
	loanlength int,
	loancapacity int
);
create table client (
    id serial PRIMARY KEY,
	type int REFERENCES clienttype(id),
	name text,
	address varchar(99),
	cpr varchar(11),
	loancount int check (loancount > -1)
);
create table bookinstance(
	id serial PRIMARY KEY NOT NULL, 
	isbn bigint REFERENCES book(isbn),
	location int REFERENCES client(id),
	available boolean
);

create table loans (
	id serial PRIMARY KEY,
	instanceid serial REFERENCES bookinstance(id),
	clientid serial REFERENCES client(id),
	startDate date default NOW(),
	endDate date check (endDate > startDate),
	overdue boolean check (endDate > NOW()) default false, 
	activeLoan boolean default true
);

SET search_path TO libraryschema;
/*     CLIENTTYPE     */
INSERT INTO libraryschema.clienttype(
	name, loanlength, loancapacity)
	VALUES ('Teacher', 21, 5);	
INSERT INTO libraryschema.clienttype(
	name, loanlength, loancapacity)
	VALUES ('Student', 28, 3);	
INSERT INTO libraryschema.clienttype(
	name, loanlength, loancapacity)
	VALUES ('Basic', 14, 2);
/*     BOOK     */
INSERT INTO libraryschema.book(
	isbn, title, author, publisher, publishyear, type)
	VALUES ('9788776011232', '120 Fun Facts', 'Mikkel & Mathias', 'CPHBUSINESS', NOW(), 'Paperback');
INSERT INTO libraryschema.book(
	isbn, title, author, publisher, publishyear, type)
	VALUES ('9788782031232', 'Databases for beginners', 'Mikkel & Mathias', 'CPHBUSINESS', NOW(), 'Paperback');
INSERT INTO libraryschema.book(
	isbn, title, author, publisher, publishyear, type)
	VALUES ('9788782041232', 'Databases for beginners', 'Mikkel & Mathias', 'CPHBUSINESS', NOW(), 'Ebook');
/*     CLIENT     */
INSERT INTO libraryschema.client(
	type, name, address, cpr, loancount)
	VALUES (1, 'Mikkel','Julemandens vej 12', '100591-1375', 0);
INSERT INTO libraryschema.client(
	type, name, address, cpr, loancount)
	VALUES (2, 'Karl','Kaninvej 62', '120971-1891', 0);
INSERT INTO libraryschema.client(
	type, name, address, cpr, loancount)
	VALUES (3, 'John','Fiskervej 3', '020177-9240', 0);
/*        BOOKINSTANCE         */
SELECT * FROM clienttype;
INSERT INTO libraryschema.bookinstance(
	isbn, location, available)
	VALUES ('9788782031232', null, true);
INSERT INTO libraryschema.bookinstance(
	isbn, location, available)
	VALUES ('9788782041232', null, true);
INSERT INTO libraryschema.bookinstance(
	isbn, location, available)
	VALUES ('9788776011232', null, true);
/*      LOANS     */
SET search_path TO libraryschema;

CREATE FUNCTION popularstudentbook (date, date)
 RETURNS TABLE( title varchar, amount bigint ) as
$BODY$
BEGIN
   RETURN QUERY SELECT book.title, COUNT(book.title) as popular FROM loans
   INNER JOIN bookinstance ON loans.instanceid = bookinstance.id
   INNER JOIN book ON bookinstance.isbn = book.isbn
   INNER JOIN client ON loans.clientid = client.id
   INNER JOIN clienttype ON client.type = clienttype.id
   WHERE clienttype.name = 'Student'
   AND loans.startDate >= $1
   AND loans.endDate <= $2
   GROUP BY 1
   ORDER BY popular DESC LIMIT 1;
END;
$BODY$
LANGUAGE plpgsql;

SELECT * FROM popularstudentbook('2020-02-26','2020-02-29');

CREATE FUNCTION returnbook1 ()
 RETURNS TRIGGER as $$
	BEGIN
   		SELECT * FROM loans 
   		INNER JOIN bookinstance ON loans.instanceid = bookinstance.id
   		INNER JOIN client ON loans.clientid = client.id
   		where loans.id =  NEW.id;
   		IF OLD.enddate < NOW() THEN
   			UPDATE loans SET activeloan = false and overdue = true where id = NEW.id;
   			RAISE NOTICE 'Loan is overdue';
   		ELSE
   			UPDATE loans SET activeloan = false where id =  NEW.id;
			RAISE NOTICE 'Book returned';
   		END IF;
   
   		UPDATE bookinstance SET location = null and available = true where bookinstance.id = loans.instanceid;
   		UPDATE client SET loancount = loancount-1 where client.id = loans.clientid;
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER updateloan
AFTER UPDATE ON loans
FOR EACH ROW
EXECUTE PROCEDURE returnbook1();

UPDATE loans SET activeloan = false where id = 3;

SELECT * FROM client;

CREATE FUNCTION createloan()
 RETURNS TRIGGER as $$
  DECLARE
  	calcenddate date;
	loanc int;
	loancap int;
	sdate date;
	loanl int;
	BEGIN
   		SELECT clienttype.loanlength,loans.startdate, client.loancount, clienttype.loancapacity into loanl,sdate,loanc, loancap FROM loans 
   			INNER JOIN client ON NEW.clientid = client.id
			INNER JOIN clienttype ON client.type = clienttype.id
   			where loans.id = NEW.id;
		IF loanc >= loancap THEN
			RAISE EXCEPTION 'You have exceeded your loan capacity'
			USING HINT = 'Please return a book before you can create a new loan';
		ELSE 
			calcenddate := sdate + 10;
			NEW.enddate := calcenddate;
   		END IF;
	RETURN NEW;
END;
$$
LANGUAGE plpgsql;

CREATE TRIGGER insertloan
BEFORE INSERT ON loans
FOR EACH ROW
EXECUTE PROCEDURE createloan();



INSERT INTO loans(
	instanceid, clientid, startdate)
	VALUES (2, 3, NOW());
	
SELECT * FROM loans;

CREATE OR REPLACE FUNCTION createenddate()
 RETURNS TRIGGER as $$
 DECLARE
 c int;
BEGIN
	EXECUTE 'SELECT clienttype.loanlength FROM loans INNER JOIN client ON loans.clientid = client.id INNER JOIN clienttype ON client.type = clienttype.id WHERE loans.id = $1'
		INTO STRICT c
		USING NEW.id;
	NEW.enddate := NEW.startdate + c;
	RETURN NEW;
END;
$$
LANGUAGE plpgsql;

EXECUTE 'SELECT count(*) FROM mytable WHERE inserted_by = $1 AND inserted <= $2'
   INTO c
   USING checked_user, checked_date;






CREATE TRIGGER enddatecreation
AFTER INSERT ON loans
FOR EACH ROW
EXECUTE PROCEDURE createenddate();

SELECT clienttype.loanlength  FROM loans
INNER JOIN client ON loans.clientid = client.id
INNER JOIN clienttype ON client.type = clienttype.id
WHERE loans.id = 2;

SELECT ses1();



